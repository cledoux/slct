.\"
.\" SLCT version 0.05 - slct
.\" simple logfile clustering tool
.\"
.\" Copyright (C) 2003-2007 Risto Vaarandi
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License
.\" as published by the Free Software Foundation; either version 2
.\" of the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
.\"
.TH slct 1 "September 2007" "SLCT 0.05"
.SH NAME
slct \- simple logfile clustering tool
.SH SYNOPSIS
.TP
.B slct 
[-b <byte offset>] 
.br
[-c <clustertable size>] 
.br
[-d <regexp>] 
.br
[-f <regexp>]
.br
[-g <slice size>]
.br
[-i <seed>]
.br
[-j]
.br
[-o <outliers file>] 
.br
[-r] 
.br
[-t <template>]
.br
[-v <wordvector size>] 
.br
[-w <wordtable size>] 
.br
[-z <clustervector size>]
.br
-s <support> <input files>
.SH DESCRIPTION
SLCT is a tool that was designed to find clusters in logfile(s), so that
each cluster corresponds to a certain line pattern that occurs frequently 
enough. Here are some examples of the clusters that SLCT is able to detect:
.PP
Dec 18 * myhost.mydomain sshd[*]: log: Connection from * port *
.br
Dec 18 * myhost.mydomain sshd[*]: log: Password authentication for * accepted.
.PP
With the help of SLCT, one can quickly build a model of logfile(s), and also 
identify rare lines that do not fit the model (and are possibly anomalous).
.PP
When SLCT is searching for clusters, it processes logfile(s) at the word level.
Every cluster description that is reported by SLCT consists of constant words 
and variable words (e.g.,
in the above examples the words 'Dec', 'myhost.mydomain', 
and 'log:' are constant words, while the words '*' and 'sshd[*]' are variable 
words). A cluster contains lines that match the cluster description, and 
the number of lines in the cluster is called the
.I support 
of the cluster. Lines that do not belong to any of the clusters detected by 
SLCT are called 
.IR outliers .
.PP
The task of SLCT is to identify a partitioning of logfile lines
into clusters, so that each cluster has a support equal or greater than
the support threshold (the value given with the
.B -s
option). In other words, if the support threshold is N, SLCT reports clusters
that contain at least N lines. Clusters are reported by just printing their
descriptions, without outputting individual lines that belong to each
detected cluster. In order to find the clusters, the following
key observation is employed: every constant word of each cluster must be
.IR frequent ,
i.e., the word must occur N or more times in logfile(s).
.PP
In order to identify clusters, SLCT first makes a pass over the data,
and finds occurrence times of all words. Every distinct word is stored to 
in-memory vocabulary together with its occurrence counter. The word position
is taken into account, e.g., if the word 'debug' is found to be the 1st word
of some lines, and the 3rd word of other lines, those two occurrences are
considered different. To minimize access times, the vocabulary is implemented
as a move-to-front hash table.
After the vocabulary has been built, SLCT finds frequent words
from it (i.e., words with occurrence times equal or greater than the support 
threshold).
.PP
When frequent words have been found, SLCT makes a second pass over the data,
and builds cluster candidates. For every input line that contains 
frequent word(s), a new candidate is created from these words, e.g., if the
line is
.PP
Connection from 10.10.10.1 closed
.PP
and the words 'Connection', 'from', and 'closed' are frequent, then the 
candidate is
.PP
Connection from * closed
.PP
If the candidate is not present 
in the candidate hash table, it will be inserted there with the support 
value 1; 
if the candidate is present, its support value will be incremented. In both
cases, the input line is assigned to the cluster candidate. After the
second data pass SLCT processes the candidate table, in order to find 
clusters (candidates with support values equal or greater than the support
threshold). If the
.B -j
option was given, SLCT first checks for every cluster candidate C whether 
the candidate table contains any of C's subclusters. A cluster C1 is 
considered to be a subcluster of C2, if all lines that belong to C1 match 
the description of C2, e.g., the cluster
.PP
Dec 18 * myhost.mydomain *: log: Connection from 10.10.10.1 port *
.PP
is a subcluster of the cluster
.PP
Dec 18 * myhost.mydomain *: log: Connection from * port *
.PP
If the cluster candidate C is found to have subclusters, all the lines 
belonging to the subclusters are also assigned to C (so that every such line
will belong to two cluster candidates simultaneously), and the support values 
of the subclusters are added to the support value of C. After all
candidates have been inspected, SLCT finds the clusters from the set of
candidates by comparing the final support values with the support threshold.
If the 
.B -j
option was not given, the step described above is omitted, which means that
candidates (and clusters) are not allowed to intersect.
.PP
If the
.B -r
option was given, SLCT makes another pass over the data, in order to refine
cluster descriptions. If the
.B -o
option was given together with
.BR -r , 
SLCT also finds outliers (lines that do not belong to any detected cluster) 
during the pass, and writes them to the file given with the
.B -o
option. Cluster description refinement means that variable 
words of cluster descriptions are inspected more closely for constant 
heads and tails, e.g., the cluster description
.PP
Dec 18 * myhost.mydomain *: log: Connection from * port *
.PP
is converted to
.PP
Dec 18 * myhost.mydomain sshd[*]: log: Connection from * port *
.PP
The algorithm described above could consume a lot of memory when applied to
a large data set, because when building the vocabulary, every distinct word
together with its occurrence counter has to be kept in memory. Unfortunately,
many words present in real life logfile(s) tend to appear only a few
times (quite often just once). Therefore, storing those very infrequent 
words to memory is a waste of space; however, before the data set has been 
completely processed, it is impossible to tell which words will finally be
infrequent.
.PP
To cope with this problem, SLCT can be instructed to make an extra pass over
the data as its very first step, and build a word summary vector of size M 
before constructing the actual vocabulary.
The size of the vector is given with the
.B -v
option (if the 
.B -v
option is omitted or the vector size is set to zero, no summary vector will
be built). The word summary vector is made up of M counters that are 
initialized to zero. During the pass over the data, every word is 
hashed to an integer value between 0 and M-1. Each time the hash value I is
calculated for a word, the Ith counter in the vector will be incremented. 
Since efficient string hashing functions are known to distribute their input 
values uniformly across the output range, each counter in the vector will
correspond roughly to W / M words (where W is the total number of different 
words). The value of the Ith counter equals to the sum of occurrence times 
of all words which hash to the value I.
.PP
After SLCT has constructed the word summary vector, it will start building
the vocabulary, but only those words are inserted into the vocabulary for 
which the counter value in the summary vector is equal or greater than
the support threshold. Words that do not fulfil this criteria can not be 
frequent, since they must occur less times than specified by the support 
threshold.
.PP
Though the employment of the summary vector involves an extra pass over the 
data set, it is a convenient way to reduce the memory costs, because even a
large vector consumes a relatively small amount of memory (e.g., if the
vector has 1,000,000 counters, and the size of the counter is 4 bytes
on your architecture, the size of the vector is still less than 4MB). If
many of the words in the data set are infrequent, many of the counter
values will not exceed the support threshold, and the resulting vocabulary
will consume much less memory. If the vector size is M, and K counter values
exceed the support threshold, then the resulting vocabulary will be about
M / K times smaller than the original vocabulary that was built without using 
the summary vector.
.PP
In order to determine the right size for the summary vector, one must take 
into account the value of the support threshold, and also the estimated 
total number of different words. If the support threshold is small, the vector
must be larger for it to be effective, otherwise a relatively small 
vector can be used. The more there are different words, the larger the vector
should be. The best way to determine the right size is to run SLCT several
times with different vector size values, and to check which value gives the
best result in terms of total memory cost.
.PP
When SLCT is invoked with a small support threshold value, the number of
cluster candidates can sometimes be much larger than the number of frequent
words and the number of actual clusters. In order to lower the memory costs
of storing the candidate hash table, the summary vector method described above
can be applied for cluster candidates as well, i.e., before the actual
candidates are generated, an extra pass is made over the data, and a summary
vector is built. The size of the summary vector is given with the
.B -z
option.
.PP
SLCT writes its output to standard output, and logs its messages to standard 
error.
.SH OPTIONS
.TP
.B "-b <byte offset>"
when processing the input file(s), ignore the first <byte offset> bytes of
every line. This option can be used to filter out the possibly irrelevant 
information in the beginning of every line (e.g., timestamp and hostname).
The default value for the option is zero, i.e., no bytes are ignored.
.TP
.B "-c <clustertable size>"
the number of slots in the cluster candidate hash table (note that this
option does not limit the actual size of the hash table, since multiple
elements can be connected to a single slot). The default value for the
option is (100 * the number of frequent words).
.TP
.B "-d <regexp>"
the regular expression describing the word delimiter. The default value for
the option is '[ \\t]+', i.e., words are separated from each other by one or
more space or tabulation characters.
.TP
.B "-f <regexp>"
when processing the input file(s), ignore all lines that do not match the
regular expression. The regular expression can contain ()-subexpressions, 
and when
.B -t
<template> option has also been given, the values of those subexpressions 
can be retrieved in <template> through $-variables. When
.B -f
and
.B -b
options are used together, the
.B -b
option is applied first.
.TP
.B "-g <slice size>"
when the
.B -j
option has been given, SLCT inspects the table of candidates and compares
each candidate with others, in order to find its subclusters. This task
has quadratic complexity, and if the candidate table is larger, substantial
amount of time could be required to complete the task. In order to reduce
the time complexity, SLCT will divide candidate table into slices, with each
slice having <slice size> candidates, and all candidates in the same slice
having the same number of constant words in their descriptions. A descriptive
bit vector is then calculated for every slice that lists all constant words
the candidates of a given slice have. If SLCT is inspecting the cluster 
candidate C for subclusters, and the descriptive vector of the slice S does
not contain all the constant words of the candidate C, the candidates from
the slice S will be skipped (i.e., they will not be compared with the 
candidate C). If the
.B -j
option has been given, the default value for the 
.B -g
option is (the number of cluster candidates / 100 + 1).
.TP
.B "-i <seed>"
the value that is used to initialize the 
.BR rand (3) 
based random number generator which is used to generate seed values for
string hashing functions inside SLCT. The default value for the option is 1.
.TP
.B "-j"
when processing the table of cluster candidates, also consider the relations
between candidates, and allow the candidates (and clusters) to intersect.
This option and the option
.B -z
are mutually exclusive, since
.B -j
requires the presence of all candidates in order to produce correct results,
but with
.B -z 
not all candidates are inserted into the candidate table.
.TP
.B "-o <outliers file>"
the file where outliers are written. This option is meaningless without the
.B -r
option.
.TP
.B "-r"
after the clusters have been found from the set of candidates, refine the
cluster descriptions.
.TP
.B "-t <template>"
template that is used to convert input lines, after they have matched the
regular expression given with the
.B -f
option. Template is a string that will replace the original input line, after
the $-variables in the template have been replaced with the values
of ()-subexpressions from the regular expression. For example, if the regular 
expression given with the
.B -f
option is 'sshd\\[[0-9]+\\]: (.+)', and the template is "$1", then the line
.br
.I sshd[1344]: connect from 192.168.1.1 
.br
will be converted to 
.br
.I connect from 192.168.1.1 
.br
This option is meaningless without the
.B -f
option.
.TP
.B "-v <wordvector size>"
the size of the word summary vector. The default value for the option is
zero, i.e., no summary vector will be generated.
.TP
.B "-w <wordtable size>"
the number of slots in the vocabulary hash table. The default value for the
option is 100,000.
.TP
.B "-z <clustervector size>"
the size of the cluster candidate summary vector. The default value for the 
option is zero, i.e., no summary vector will be generated. This option and
the option
.B -j
are mutually exclusive, since
.B -j
requires the presence of all candidates in order to produce correct results,
but when the summar vector is employed, not all candidates are inserted
into the candidate table.
.TP
.B "-s <support>"
the support threshold value. The value can be either an integer, or a real 
number with a trailing %-sign.
.SH AUTHOR
Risto Vaarandi (ristov at users d0t s0urcef0rge d0t net)
.SH ACKNOWLEDGMENTS
This software uses the fast Shift-Add-Xor string hashing algorithm
by M. V. Ramakrishna and Justin Zobel.
